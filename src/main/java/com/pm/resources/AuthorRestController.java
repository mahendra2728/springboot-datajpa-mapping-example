package com.pm.resources;import com.pm.dto.AuthorBookInfoDto;import com.pm.model.Author;import com.pm.repository.AuthorRepository;import java.util.List;import java.util.Objects;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/v1/authors")public class AuthorRestController {    @Autowired    private AuthorRepository authorRepository;    @PostMapping    public ResponseEntity<Author> addAuthor(@RequestBody Author author) {        Author authorResponse = authorRepository.save(author);        return ResponseEntity.ok(authorResponse);    }    @PutMapping("/{authorId}")    public ResponseEntity<Author> updateAuthor(@PathVariable("authorId") int authorId,        @RequestBody Author updatedAuthor) {        Author existingAuthor = authorRepository.findById(authorId).orElse(null);        if (Objects.isNull(existingAuthor)) {            return ResponseEntity.notFound().build();        }        existingAuthor.setAuthorName(updatedAuthor.getAuthorName());        existingAuthor.setDescription(updatedAuthor.getDescription());        existingAuthor.setBooks(updatedAuthor.getBooks());        return ResponseEntity.ok(authorRepository.save(existingAuthor));    }    @GetMapping    public List<Author> getAllAuthor() {        return authorRepository.findAll();    }    @GetMapping("/{authorId}")    public ResponseEntity<Author> getByAuthorId(@PathVariable("authorId") int authorId) {        Author isAuthorPresent = authorRepository.findById(authorId).orElse(null);        if (Objects.isNull(isAuthorPresent)) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(isAuthorPresent);    }    @DeleteMapping("/{authorId}")    public ResponseEntity<Object> deleteAuthorById(@PathVariable("authorId") int authorId) {        Author isAuthorPresent = authorRepository.findById(authorId).orElse(null);        if (Objects.isNull(isAuthorPresent)) {            return ResponseEntity.notFound().build();        }        authorRepository.deleteById(authorId);        return ResponseEntity.ok("Author with id " + authorId + " deleted successfully");    }    @GetMapping("/authorBookInfo")    public ResponseEntity<List<AuthorBookInfoDto>> getAuthorBooksNameInfo() {        return ResponseEntity.ok(authorRepository.getAuthorBookInfo());    }}