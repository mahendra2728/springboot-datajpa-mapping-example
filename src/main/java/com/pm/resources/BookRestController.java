package com.pm.resources;import com.pm.model.Book;import com.pm.repository.BookRepository;import java.util.List;import java.util.Objects;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/v1/books")public class BookRestController {    @Autowired    private BookRepository bookRepository;    @PostMapping    public ResponseEntity<Book> addBook(@RequestBody Book book){        Book book1 = bookRepository.save(book);        return ResponseEntity.ok(book1);    }    @PutMapping    public ResponseEntity<Book> updateBook(@PathVariable("bookId") int bookId, @RequestBody Book updatedBook){       Book existingBook =  bookRepository.findById(bookId).orElse(null);       if(Objects.isNull(existingBook)){           bookRepository.findById(bookId).ifPresent(previous->{               previous.setBookName(updatedBook.getBookName());               previous.setDescription(updatedBook.getDescription());               bookRepository.save(previous);           });           return ResponseEntity.ok(updatedBook);       }       return ResponseEntity.notFound().build();    }    @GetMapping    public ResponseEntity<List<Book>> getAllBooks(){        return ResponseEntity.ok(bookRepository.findAll());    }    @GetMapping("/{bookId}")    public ResponseEntity<Book> getBookById(@PathVariable("bookId") int bookId){        Book book = bookRepository.findById(bookId).orElse(null);        if(Objects.isNull(book)){            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(book);    }    @DeleteMapping("/{bookId}")    public ResponseEntity<Object> deleteBook(@PathVariable("bookId") int bookId){        Book book = bookRepository.findById(bookId).orElse(null);        if(Objects.isNull(book)){            return ResponseEntity.notFound().build();        }        bookRepository.delete(book);        return ResponseEntity.ok("Book with id "+bookId+ " deleted successfully");    }}